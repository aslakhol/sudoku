import Head from "next/head";
import { Button } from "../components/ui/button";
import { Label } from "../components/ui/label";
import { Input } from "../components/ui/input";
import { useState } from "react";
import { findCombinations } from "../lib/calculateCages";

export default function Home() {
  const [cageSize, setCageSize] = useState(1);
  const [cageTotal, setCageTotal] = useState(1);
  const [validCombinations, setValidCombinations] = useState<number[][]>([[]]);
  console.log(cageSize, cageTotal);

  const trigger = () => {
    console.log(cageSize, cageTotal);
    setValidCombinations(findCombinations(cageTotal, cageSize));
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <div className="grid w-full max-w-sm items-center gap-1.5">
            <Label htmlFor="cageSize">Cage size</Label>
            <Input
              type="number"
              id="cageSize"
              value={cageSize}
              onChange={(e) => setCageSize(Number(e.target.value))}
              min={1}
              max={9}
            />
          </div>
          <div className="grid w-full max-w-sm items-center gap-1.5">
            <Label htmlFor="cageTotal">Cage total</Label>
            <Input
              type="number"
              id="cageTotal"
              value={cageTotal}
              onChange={(e) => setCageTotal(Number(e.target.value))}
            />
          </div>
          <Button onClick={trigger}>Find combinations</Button>
          <Combinations combinations={validCombinations} />
        </div>
      </main>
    </>
  );
}

type CombinationsProps = { combinations: number[][] };

const Combinations = ({ combinations }: CombinationsProps) => {
  return (
    <div className="flex gap-2">
      {combinations.map((comb, i) => (
        <div key={i} className="flex">
          {comb.map((num, j) => (
            <span key={j}>{num}</span>
          ))}
        </div>
      ))}
    </div>
  );
};
